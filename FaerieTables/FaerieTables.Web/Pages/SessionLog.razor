@page "/session/{SessionId:guid}"
@inject HttpClient Http
@inject NavigationManager NavManager

<h3>Session Log</h3>

@if (session == null)
{
    <p>Loading session...</p>
}
else
{
    <div class="mb-3">
        <h4>@session.Name (@session.SessionId)</h4>
        <p>@session.Description</p>
    </div>
    <div class="mb-3">
        <button class="btn btn-secondary me-2" @onclick="ExportLog">Export as Markdown</button>
        <button class="btn btn-danger" @onclick="ClearLog">Clear Log</button>
    </div>
    <ul class="list-group">
        @if (sessionRolls == null)
        {
            <li class="list-group-item">Loading rolls...</li>
        }
        else if (!sessionRolls.Any())
        {
            <li class="list-group-item">No rolls in session.</li>
        }
        else
        {
            @foreach (var r in sessionRolls)
            {
                <li class="list-group-item">
                    <strong>@r.TableTitle</strong> (@r.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")):
                    @foreach (var rr in r.RollResults)
                    {
                        <span>@rr.Value </span>
                    }
                </li>
            }
        }
    </ul>

    @if (!string.IsNullOrEmpty(markdownExport))
    {
        <div class="mt-3">
            <h5>Markdown Export:</h5>
            <pre>@markdownExport</pre>
        </div>
    }
}

@code {
    [Parameter] public Guid SessionId { get; set; }
    private SessionDto? session;
    private List<Roll>? sessionRolls;
    private string? markdownExport;

    protected override async Task OnInitializedAsync()
    {
        session = await Http.GetFromJsonAsync<SessionDto>($"/api/session/{SessionId}");
        sessionRolls = await Http.GetFromJsonAsync<List<Roll>>($"/api/session/{SessionId}/rolls");
    }

    private async Task ExportLog()
    {
        markdownExport = await Http.GetStringAsync($"/api/session/{SessionId}/export");
    }

    private async Task ClearLog()
    {
        var response = await Http.DeleteAsync($"/api/session/{SessionId}/rolls");
        if (response.IsSuccessStatusCode)
        {
            sessionRolls = new List<Roll>();
        }
    }

    public class SessionDto
    {
        public Guid SessionId { get; set; }
        public string UserId { get; set; } = "";
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public List<Roll> Rolls { get; set; } = new();
    }

    public class Roll
    {
        public Guid RollId { get; set; }
        public Guid SessionId { get; set; }
        public Guid TableId { get; set; }
        public string TableTitle { get; set; } = "";
        public string Mode { get; set; } = "";
        public DateTime Timestamp { get; set; }
        public List<RollResult> RollResults { get; set; } = new();
    }

    public class RollResult
    {
        public Guid Id { get; set; }
        public Guid RollId { get; set; }
        public Guid TableColumnId { get; set; }
        public string Value { get; set; } = "";
    }
}
