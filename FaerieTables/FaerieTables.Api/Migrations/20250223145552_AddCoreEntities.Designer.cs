// <auto-generated />
using System;
using FaerieTables.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FaerieTables.Api.Migrations
{
    [DbContext(typeof(RandomTableContext))]
    [Migration("20250223145552_AddCoreEntities")]
    partial class AddCoreEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("FaerieTables.Api.Entities.Roll", b =>
                {
                    b.Property<Guid>("RollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TableTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("RollId");

                    b.HasIndex("SessionId");

                    b.ToTable("Rolls");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.RollResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RollId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableColumnId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RollId");

                    b.HasIndex("TableColumnId");

                    b.ToTable("RollResults");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.RowValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ColumnId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RowId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("RowId");

                    b.ToTable("RowValues");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SessionId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DiceRange")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.TableColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("TableColumns");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.TableRow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("TableRows");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.TableTag", b =>
                {
                    b.Property<Guid>("TableId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagId")
                        .HasColumnType("TEXT");

                    b.HasKey("TableId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TableTags");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.Roll", b =>
                {
                    b.HasOne("FaerieTables.Api.Entities.Session", "Session")
                        .WithMany("Rolls")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.RollResult", b =>
                {
                    b.HasOne("FaerieTables.Api.Entities.Roll", "Roll")
                        .WithMany("RollResults")
                        .HasForeignKey("RollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FaerieTables.Api.Entities.TableColumn", "TableColumn")
                        .WithMany()
                        .HasForeignKey("TableColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roll");

                    b.Navigation("TableColumn");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.RowValue", b =>
                {
                    b.HasOne("FaerieTables.Api.Entities.TableColumn", "Column")
                        .WithMany()
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FaerieTables.Api.Entities.TableRow", "Row")
                        .WithMany("RowValues")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Column");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.TableColumn", b =>
                {
                    b.HasOne("FaerieTables.Api.Entities.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.TableRow", b =>
                {
                    b.HasOne("FaerieTables.Api.Entities.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.TableTag", b =>
                {
                    b.HasOne("FaerieTables.Api.Entities.Table", "Table")
                        .WithMany("TableTags")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FaerieTables.Api.Entities.Tag", "Tag")
                        .WithMany("TableTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.Roll", b =>
                {
                    b.Navigation("RollResults");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.Session", b =>
                {
                    b.Navigation("Rolls");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Rows");

                    b.Navigation("TableTags");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.TableRow", b =>
                {
                    b.Navigation("RowValues");
                });

            modelBuilder.Entity("FaerieTables.Api.Entities.Tag", b =>
                {
                    b.Navigation("TableTags");
                });
#pragma warning restore 612, 618
        }
    }
}
